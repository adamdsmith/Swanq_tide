{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Swanquarter NWR tide gage\"\noutput:\n  html_document:\n    theme: cerulean\nruntime: shiny\n---\n\n```{r set-options, echo=FALSE, cache=FALSE}\noptions(width = 600, scipen=999)\nknitr::opts_chunk$set(message=FALSE, warning=FALSE, echo=FALSE)\n```\n\nThe specific objectives of this document are:\n\n1. To compare water level from sonde deployments at [Bell Island fishing pier](https://goo.gl/maps/P8AzomW9toL2) (blue lines) on Swanquarter National Wildlife Refuge with water levels and weather conditions from a tide gage/buoy at [USCG Station Hatteras](http://tidesandcurrents.noaa.gov/waterlevels.html?id=8654467) (black lines) and water levels from the [North Carolina Pungo River gage]()(red line).\n\n\n```{r loadstuff}\nncdc <- \"BvCqJZBhVjtoLSvZIzWarGmRMVTJBPjr\"\n\n# Loading required packages\npacman::p_load(readr, readxl, dplyr, lubridate, sp, leaflet, \n               dygraphs, rnoaa, ggplot2, shiny)\n# readr       # Reading Excel data\n# readxl      # Reading Excel data\n# dplyr       # Data manipulation\n# lubridate   # Dealing with dates\n# sp          # Spatial data\n# leaflet     # Interactive mapping\n# dygraphs    # R interface to the dygraphs JS library for time series\n# rnoaa       # Access to NOAA tide gages and buoy weather\n# ggplot2     # Plotting\n# shiny       # Interactive plots\n\n# Load utility functions\nsource(\"./R/utils.R\")\n```\n\n```{r import_caha_tide, eval = FALSE}\n# Retrieve USCG Station Hatteras tide gage data\ncaha <- get_tides()\nsave(caha, file = \"./Data/caha_gage.rda\")\n```\n\n```{r weather, eval = FALSE}\n# From CAHA buoy, we can get matched (to tide) wind speed, direction, and SST\ncaha_wx <- get_buoy_wx()\n\ncaha_prcp <- ghcnd_search(stationid = \"USW00093729\",\n                          date_min = \"2013-05-01\", # for some reason, use day before start\n                          date_max = \"2015-12-01\",\n                          var = \"PRCP\")[[1]] %>%\n# Adding day so it shows previous 24 hours of precip\n  mutate(dt = ymd_hms(paste(date, \"00:00:00\")) + days(1), \n         prior_prcp = round(prcp / 100 / 2.54, 2)) %>% # convert to inches\n  select(dt, prior_prcp) %>% arrange(dt) %>% as.data.frame()\n\ncaha_wx <- left_join(caha_wx, caha_prcp)\n#save(caha_wx, file = \"./Data/caha_wx.rda\")\n\n```\n\n```{r bell_pungo}\n# Load spreadsheets and convert to usable format\nbell <- readxl_allsheets(\"./Data/WaterLevelData_BellIsland.xlsx\")\nbell[[\"metadata\"]] <- NULL\nbell <- as.data.frame(do.call(rbind, bell)) %>%\n  select(9:12) \nnames(bell) <- c(\"dt\", \"wl\", \"sst\", \"sal\")\nbell <- mutate(bell,\n               dt = round_date(dt, \"minute\"))\n\npungo <- readxl_allsheets(\"./Data/Pungo_waterlevel.xlsx\")\npungo[[\"Metadata\"]] <- NULL\npungo <- as.data.frame(do.call(rbind, pungo)) %>%\n  mutate(dt = ymd_hms(Reading),\n         wl = Value / 3.28084) %>% # convert to m\n  select(dt, wl)\n```\n\n\n```{r plots}\nload(\"./Data/caha_gage.rda\")\nload(\"./Data/caha_wx.rda\")\ncaha <- left_join(caha, caha_wx)\ndata_list <- list(bell = bell, caha = caha, pungo = pungo)\n\n# Build the Shiny App\nshinyApp(\n  \nui <- fluidPage(\n  fluidRow(\n    column(12, \n           h5(helpText(p(strong(span(\"Bell Island\", style = \"color:blue\"), \"data available: 3 May 2013 - 7 Feb 2014; 6 May - 16 Jul 2014\")))))\n  ), \n  \n  fluidRow(\n    column(3, \n           dateInput(\"date\", label = h4(\"Select a start date:\"),\n                     value = \"2013-05-03\")),\n#           actionButton(\"nextmo\", \"Next month\", style='padding:6px; font-size:90%'),\n#           actionButton(\"next3mos\", \"Next 3 months\", style='padding:6px; font-size:90%')),\n    column(3,\n           radioButtons(\"window\", label = h4(\"Select a time window\"),\n                        choices = list(\"3 days\" = 3, \n                                       \"1 week\" = 7,\n                                       \"1 month\" = 30,\n                                       \"3 months\" = 90), selected = 3)),\n    column(4,\n           checkboxGroupInput(\"showGage\", label = h4(\"Select supporting gages to view\"), \n                              choices = list(\"USCG Station Hatteras\" = \"caha\", \"Pungo River\" = \"pungo\"),\n                              selected = c(\"caha\", \"pungo\")))\n  ),\n  \n  fluidRow(\n    column(width = 12,\n           plotOutput(\"tides\", height = 250))\n  ),\n  \n  fluidRow(\n    column(width = 12,\n           plotOutput(\"temps\", height = 200))\n  ),\n  \n  fluidRow(\n    column(width = 12,\n           plotOutput(\"salinity\", height = 200))\n  )\n\n),\n\nserver <- function(input, output, session) {\n\n  filterData <- reactive({\n    filt_dat <- data_list[c(\"bell\", input$showGage)]\n    start_date <- ymd(input$date)\n    filt_dat <- lapply(filt_dat, function(gage) {\n      gage[gage$dt >= start_date & gage$dt <= start_date + days(input$window), ]\n    })\n  })\n\n  output$tides <- renderPlot({\n    plotDat <- filterData()\n    # Get date and water level range across all requested gages\n    dateRange <- diff(range(unlist(lapply(plotDat, function(gage) gage$dt)), na.rm = TRUE))\n    wlRange <- diff(range(unlist(lapply(plotDat, function(gage) gage$wl)), na.rm = TRUE))\n    # Scaling so wind\n    scaling <- c(dateRange, wlRange)\n    \n#    plotDat <- mutate(plotDat,\n#                  x.end = dt + wsp_sc * scaling[[1]] * sin(wdir / 180 * pi),\n#                  y.end = bell_wl + wsp_sc * scaling[[2]] * cos(wdir / 180 * pi))\n    plotDat <- mutate(plotDat,\n                      x.end = dt + 0.001 * scaling[[1]] * sin(wdir / 180 * pi),\n                      y.end = bell_wl + 0.001 * scaling[[2]] * cos(wdir / 180 * pi))\n    \n    l_size <- 0.75\n     \n    p <- ggplot(data = plotDat[[\"bell\"]], aes(x = dt, y = wl)) +\n      geom_line(size = l_size, color = \"blue\") +\n    \n     if (n_days < 60) {\n         n_days <- length(unique(lubridate::yday(plotDat$dt)))\n         arrDat <- plotDat[every_nth(1:nrow(plotDat), \n                                     ifelse(n_days > 8, 60, ifelse(n_days > 4, 20, 10)),\n                                     empty = FALSE, inverse = TRUE), ]\n         p <- p + geom_segment(data = arrDat,\n                               size = l_size*1.5,\n                               aes(x = dt, xend = x.end, \n                                   y = bell_wl, yend = y.end,   \n                                   colour = wsp),\n                               arrow = arrow(angle = 20, length = unit(0.04, \"snpc\"), \n                                             ends = \"first\"))\n    }\n   \n    if (\"caha\" %in% input$showGage) {\n      p <- p + geom_line(data = plotDat[[\"caha\"]], size = l_size) \n    }\n      ylab(\"Water level, choose your units\") + xlab(\"\") +\n      scale_colour_gradient(\"Wind speed (m/s)\", low=\"green\", high=\"red\") + theme_bw() +\n      theme(legend.justification=c(0,1), legend.position=c(0,1.025),\n            legend.direction = \"horizontal\", legend.key.height = unit(0.02, \"snpc\"),\n            legend.background = element_rect(fill=NA))\n    \n    \n    if (nrow(pungoDat) > 0) \n      p <- p + geom_line(data = pungoDat, aes(x = dt, y = pungo_wl), size = l_size, color = \"red\") \n\n    p\n    \n  })\n\n  output$temps <- renderPlot({\n    plotDat <- filterData()\n    l_size <- 0.75\n    ggplot(data = plotDat, aes(x = dt, y = sst)) + geom_line(size = l_size) + \n      geom_line(aes(y = bell_sst), size = l_size, color = \"blue\") +\n      ylab(expression(\"Water temperature \"(degree*C))) + xlab(\"\") +\n      theme_bw()\n  })\n  \n   output$salinity <- renderPlot({\n    plotDat <- filterData()\n    l_size <- 0.75\n    ggplot(data = plotDat, aes(x = dt, y = bell_sal)) + \n      geom_line(size = l_size, color = \"blue\") + \n      ylab(\"Salinity (ppt)\") + xlab(\"Date & time\") +\n      theme_bw()\n  })\n\n},\n  \n  options = list(height = 850)\n\n)\n```\n",
    "created" : 1479752580067.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "993354968",
    "id" : "B512F626",
    "lastKnownWriteTime" : 1479752685,
    "last_content_update" : 1479752685134,
    "path" : "~/FWS_Projects/Swanq_tide/SQ_water_level.Rmd",
    "project_path" : "SQ_water_level.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}